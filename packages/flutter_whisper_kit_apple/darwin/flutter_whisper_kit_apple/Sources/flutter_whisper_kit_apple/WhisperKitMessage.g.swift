// Autogenerated from Pigeon (v25.3.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Sendable?

  init(code: String, message: String?, details: Sendable?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
  }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}


private class WhisperKitMessagePigeonCodecReader: FlutterStandardReader {
}

private class WhisperKitMessagePigeonCodecWriter: FlutterStandardWriter {
}

private class WhisperKitMessagePigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return WhisperKitMessagePigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return WhisperKitMessagePigeonCodecWriter(data: data)
  }
}

class WhisperKitMessagePigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = WhisperKitMessagePigeonCodec(readerWriter: WhisperKitMessagePigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol WhisperKitMessage {
  func loadModel(variant: String?, modelRepo: String?, redownload: Bool, completion: @escaping (Result<String?, Error>) -> Void)
  func transcribeFromFile(filePath: String, options: [String: Any?], completion: @escaping (Result<String?, Error>) -> Void)
  func startRecording(options: [String: Any?], loop: Bool, completion: @escaping (Result<String?, Error>) -> Void)
  func stopRecording(loop: Bool, completion: @escaping (Result<String?, Error>) -> Void)
  func fetchAvailableModels(modelRepo: String, matching: [String], token: String?, completion: @escaping (Result<[String?], Error>) -> Void)
  func deviceName(completion: @escaping (Result<String, Error>) -> Void)
  func recommendedModels(completion: @escaping (Result<String?, Error>) -> Void)
  func formatModelFiles(modelFiles: [String], completion: @escaping (Result<[String], Error>) -> Void)
  func detectLanguage(audioPath: String, completion: @escaping (Result<String?, Error>) -> Void)
  func fetchModelSupportConfig(repo: String, downloadBase: String?, token: String?, completion: @escaping (Result<String?, Error>) -> Void)
  func recommendedRemoteModels(repo: String, downloadBase: String?, token: String?, completion: @escaping (Result<String?, Error>) -> Void)
  func setupModels(model: String?, downloadBase: String?, modelRepo: String?, modelToken: String?, modelFolder: String?, download: Bool, completion: @escaping (Result<String?, Error>) -> Void)
  func download(variant: String, downloadBase: String?, useBackgroundSession: Bool, repo: String, token: String?, completion: @escaping (Result<String?, Error>) -> Void)
  func prewarmModels(completion: @escaping (Result<String?, Error>) -> Void)
  func unloadModels(completion: @escaping (Result<String?, Error>) -> Void)
  func clearState(completion: @escaping (Result<String?, Error>) -> Void)
  func loggingCallback(level: String?, completion: @escaping (Result<Void, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class WhisperKitMessageSetup {
  static var codec: FlutterStandardMessageCodec { WhisperKitMessagePigeonCodec.shared }
  /// Sets up an instance of `WhisperKitMessage` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: WhisperKitMessage?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let loadModelChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.loadModel\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      loadModelChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let variantArg: String? = nilOrValue(args[0])
        let modelRepoArg: String? = nilOrValue(args[1])
        let redownloadArg = args[2] as! Bool
        api.loadModel(variant: variantArg, modelRepo: modelRepoArg, redownload: redownloadArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      loadModelChannel.setMessageHandler(nil)
    }
    let transcribeFromFileChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.transcribeFromFile\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      transcribeFromFileChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filePathArg = args[0] as! String
        let optionsArg = args[1] as! [String: Any?]
        api.transcribeFromFile(filePath: filePathArg, options: optionsArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      transcribeFromFileChannel.setMessageHandler(nil)
    }
    let startRecordingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.startRecording\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startRecordingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let optionsArg = args[0] as! [String: Any?]
        let loopArg = args[1] as! Bool
        api.startRecording(options: optionsArg, loop: loopArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startRecordingChannel.setMessageHandler(nil)
    }
    let stopRecordingChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.stopRecording\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopRecordingChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let loopArg = args[0] as! Bool
        api.stopRecording(loop: loopArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopRecordingChannel.setMessageHandler(nil)
    }
    let fetchAvailableModelsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.fetchAvailableModels\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fetchAvailableModelsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let modelRepoArg = args[0] as! String
        let matchingArg = args[1] as! [String]
        let tokenArg: String? = nilOrValue(args[2])
        api.fetchAvailableModels(modelRepo: modelRepoArg, matching: matchingArg, token: tokenArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      fetchAvailableModelsChannel.setMessageHandler(nil)
    }
    let deviceNameChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.deviceName\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      deviceNameChannel.setMessageHandler { _, reply in
        api.deviceName { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      deviceNameChannel.setMessageHandler(nil)
    }
    let recommendedModelsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.recommendedModels\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      recommendedModelsChannel.setMessageHandler { _, reply in
        api.recommendedModels { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      recommendedModelsChannel.setMessageHandler(nil)
    }
    let formatModelFilesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.formatModelFiles\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      formatModelFilesChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let modelFilesArg = args[0] as! [String]
        api.formatModelFiles(modelFiles: modelFilesArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      formatModelFilesChannel.setMessageHandler(nil)
    }
    let detectLanguageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.detectLanguage\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      detectLanguageChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let audioPathArg = args[0] as! String
        api.detectLanguage(audioPath: audioPathArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      detectLanguageChannel.setMessageHandler(nil)
    }
    let fetchModelSupportConfigChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.fetchModelSupportConfig\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fetchModelSupportConfigChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let repoArg = args[0] as! String
        let downloadBaseArg: String? = nilOrValue(args[1])
        let tokenArg: String? = nilOrValue(args[2])
        api.fetchModelSupportConfig(repo: repoArg, downloadBase: downloadBaseArg, token: tokenArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      fetchModelSupportConfigChannel.setMessageHandler(nil)
    }
    let recommendedRemoteModelsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.recommendedRemoteModels\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      recommendedRemoteModelsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let repoArg = args[0] as! String
        let downloadBaseArg: String? = nilOrValue(args[1])
        let tokenArg: String? = nilOrValue(args[2])
        api.recommendedRemoteModels(repo: repoArg, downloadBase: downloadBaseArg, token: tokenArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      recommendedRemoteModelsChannel.setMessageHandler(nil)
    }
    let setupModelsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.setupModels\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      setupModelsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let modelArg: String? = nilOrValue(args[0])
        let downloadBaseArg: String? = nilOrValue(args[1])
        let modelRepoArg: String? = nilOrValue(args[2])
        let modelTokenArg: String? = nilOrValue(args[3])
        let modelFolderArg: String? = nilOrValue(args[4])
        let downloadArg = args[5] as! Bool
        api.setupModels(model: modelArg, downloadBase: downloadBaseArg, modelRepo: modelRepoArg, modelToken: modelTokenArg, modelFolder: modelFolderArg, download: downloadArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      setupModelsChannel.setMessageHandler(nil)
    }
    let downloadChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.download\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      downloadChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let variantArg = args[0] as! String
        let downloadBaseArg: String? = nilOrValue(args[1])
        let useBackgroundSessionArg = args[2] as! Bool
        let repoArg = args[3] as! String
        let tokenArg: String? = nilOrValue(args[4])
        api.download(variant: variantArg, downloadBase: downloadBaseArg, useBackgroundSession: useBackgroundSessionArg, repo: repoArg, token: tokenArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      downloadChannel.setMessageHandler(nil)
    }
    let prewarmModelsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.prewarmModels\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      prewarmModelsChannel.setMessageHandler { _, reply in
        api.prewarmModels { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      prewarmModelsChannel.setMessageHandler(nil)
    }
    let unloadModelsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.unloadModels\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      unloadModelsChannel.setMessageHandler { _, reply in
        api.unloadModels { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      unloadModelsChannel.setMessageHandler(nil)
    }
    let clearStateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.clearState\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      clearStateChannel.setMessageHandler { _, reply in
        api.clearState { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      clearStateChannel.setMessageHandler(nil)
    }
    let loggingCallbackChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.loggingCallback\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      loggingCallbackChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let levelArg: String? = nilOrValue(args[0])
        api.loggingCallback(level: levelArg) { result in
          switch result {
          case .success:
            reply(wrapResult(nil))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      loggingCallbackChannel.setMessageHandler(nil)
    }
  }
}
