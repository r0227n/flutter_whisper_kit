// Autogenerated from Pigeon (v25.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package flutter_whisper_kit_android

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.EventChannel
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMethodCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer
private object WhisperKitMessagePigeonUtils {

  fun wrapResult(result: Any?): List<Any?> {
    return listOf(result)
  }

  fun wrapError(exception: Throwable): List<Any?> {
    return if (exception is FlutterError) {
      listOf(
        exception.code,
        exception.message,
        exception.details
      )
    } else {
      listOf(
        exception.javaClass.simpleName,
        exception.toString(),
        "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
      )
    }
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()
private open class WhisperKitMessagePigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return     super.readValueOfType(type, buffer)
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    super.writeValue(stream, value)
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface WhisperKitMessage {
  fun loadModel(variant: String?, modelRepo: String?, redownload: Boolean, callback: (Result<String?>) -> Unit)
  fun transcribeFromFile(filePath: String, options: Map<String, Any?>, callback: (Result<String?>) -> Unit)
  fun startRecording(options: Map<String, Any?>, loop: Boolean, callback: (Result<String?>) -> Unit)
  fun stopRecording(loop: Boolean, callback: (Result<String?>) -> Unit)
  fun fetchAvailableModels(modelRepo: String, matching: List<String>, token: String?, callback: (Result<List<String>>) -> Unit)
  fun deviceName(callback: (Result<String>) -> Unit)
  fun recommendedModels(callback: (Result<String?>) -> Unit)
  fun formatModelFiles(modelFiles: List<String>, callback: (Result<List<String>>) -> Unit)
  fun detectLanguage(audioPath: String, callback: (Result<String?>) -> Unit)
  fun fetchModelSupportConfig(repo: String, downloadBase: String?, token: String?, callback: (Result<String?>) -> Unit)
  fun recommendedRemoteModels(repo: String, downloadBase: String?, token: String?, callback: (Result<String?>) -> Unit)
  fun setupModels(model: String?, downloadBase: String?, modelRepo: String?, modelToken: String?, modelFolder: String?, download: Boolean, callback: (Result<String?>) -> Unit)
  fun download(variant: String, downloadBase: String?, useBackgroundSession: Boolean, repo: String, token: String?, callback: (Result<String?>) -> Unit)
  fun prewarmModels(callback: (Result<String?>) -> Unit)
  fun unloadModels(callback: (Result<String?>) -> Unit)
  fun clearState(callback: (Result<String?>) -> Unit)
  fun loggingCallback(level: String?, callback: (Result<Unit>) -> Unit)

  companion object {
    /** The codec used by WhisperKitMessage. */
    val codec: MessageCodec<Any?> by lazy {
      WhisperKitMessagePigeonCodec()
    }
    /** Sets up an instance of `WhisperKitMessage` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: WhisperKitMessage?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.loadModel$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val variantArg = args[0] as String?
            val modelRepoArg = args[1] as String?
            val redownloadArg = args[2] as Boolean
            api.loadModel(variantArg, modelRepoArg, redownloadArg) { result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(WhisperKitMessagePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(WhisperKitMessagePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.transcribeFromFile$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val filePathArg = args[0] as String
            val optionsArg = args[1] as Map<String, Any?>
            api.transcribeFromFile(filePathArg, optionsArg) { result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(WhisperKitMessagePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(WhisperKitMessagePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.startRecording$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val optionsArg = args[0] as Map<String, Any?>
            val loopArg = args[1] as Boolean
            api.startRecording(optionsArg, loopArg) { result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(WhisperKitMessagePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(WhisperKitMessagePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.stopRecording$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val loopArg = args[0] as Boolean
            api.stopRecording(loopArg) { result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(WhisperKitMessagePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(WhisperKitMessagePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.fetchAvailableModels$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val modelRepoArg = args[0] as String
            val matchingArg = args[1] as List<String>
            val tokenArg = args[2] as String?
            api.fetchAvailableModels(modelRepoArg, matchingArg, tokenArg) { result: Result<List<String>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(WhisperKitMessagePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(WhisperKitMessagePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.deviceName$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.deviceName{ result: Result<String> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(WhisperKitMessagePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(WhisperKitMessagePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.recommendedModels$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.recommendedModels{ result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(WhisperKitMessagePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(WhisperKitMessagePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.formatModelFiles$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val modelFilesArg = args[0] as List<String>
            api.formatModelFiles(modelFilesArg) { result: Result<List<String>> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(WhisperKitMessagePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(WhisperKitMessagePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.detectLanguage$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val audioPathArg = args[0] as String
            api.detectLanguage(audioPathArg) { result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(WhisperKitMessagePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(WhisperKitMessagePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.fetchModelSupportConfig$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val repoArg = args[0] as String
            val downloadBaseArg = args[1] as String?
            val tokenArg = args[2] as String?
            api.fetchModelSupportConfig(repoArg, downloadBaseArg, tokenArg) { result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(WhisperKitMessagePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(WhisperKitMessagePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.recommendedRemoteModels$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val repoArg = args[0] as String
            val downloadBaseArg = args[1] as String?
            val tokenArg = args[2] as String?
            api.recommendedRemoteModels(repoArg, downloadBaseArg, tokenArg) { result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(WhisperKitMessagePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(WhisperKitMessagePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.setupModels$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val modelArg = args[0] as String?
            val downloadBaseArg = args[1] as String?
            val modelRepoArg = args[2] as String?
            val modelTokenArg = args[3] as String?
            val modelFolderArg = args[4] as String?
            val downloadArg = args[5] as Boolean
            api.setupModels(modelArg, downloadBaseArg, modelRepoArg, modelTokenArg, modelFolderArg, downloadArg) { result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(WhisperKitMessagePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(WhisperKitMessagePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.download$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val variantArg = args[0] as String
            val downloadBaseArg = args[1] as String?
            val useBackgroundSessionArg = args[2] as Boolean
            val repoArg = args[3] as String
            val tokenArg = args[4] as String?
            api.download(variantArg, downloadBaseArg, useBackgroundSessionArg, repoArg, tokenArg) { result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(WhisperKitMessagePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(WhisperKitMessagePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.prewarmModels$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.prewarmModels{ result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(WhisperKitMessagePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(WhisperKitMessagePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.unloadModels$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.unloadModels{ result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(WhisperKitMessagePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(WhisperKitMessagePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.clearState$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            api.clearState{ result: Result<String?> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(WhisperKitMessagePigeonUtils.wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(WhisperKitMessagePigeonUtils.wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_whisper_kit.WhisperKitMessage.loggingCallback$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val levelArg = args[0] as String?
            api.loggingCallback(levelArg) { result: Result<Unit> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(WhisperKitMessagePigeonUtils.wrapError(error))
              } else {
                reply.reply(WhisperKitMessagePigeonUtils.wrapResult(null))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
