// Autogenerated from Pigeon (v25.3.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import, no_leading_underscores_for_local_identifiers

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

PlatformException _createConnectionError(String channelName) {
  return PlatformException(
    code: 'channel-error',
    message: 'Unable to establish connection on channel: "$channelName".',
  );
}
bool _deepEquals(Object? a, Object? b) {
  if (a is List && b is List) {
    return a.length == b.length &&
        a.indexed
        .every(((int, dynamic) item) => _deepEquals(item.$2, b[item.$1]));
  }
  if (a is Map && b is Map) {
    return a.length == b.length && a.entries.every((MapEntry<Object?, Object?> entry) =>
        (b as Map<Object?, Object?>).containsKey(entry.key) &&
        _deepEquals(entry.value, b[entry.key]));
  }
  return a == b;
}


class DecodingOptionsMessage {
  DecodingOptionsMessage({
    this.task,
    this.language,
    this.temperature,
    this.sampleLen,
    this.bestOf,
    this.beamSize,
    this.patience,
    this.lengthPenalty,
    this.suppressBlank,
    this.suppressTokens,
    this.withoutTimestamps,
    this.maxInitialTimestamp,
    this.wordTimestamps,
    this.prependPunctuations,
    this.appendPunctuations,
    this.logProbThreshold,
    this.noSpeechThreshold,
    this.compressionRatioThreshold,
    this.conditionOnPreviousText,
    this.prompt,
    this.chunkingStrategy,
  });

  String? task;

  String? language;

  double? temperature;

  int? sampleLen;

  int? bestOf;

  int? beamSize;

  double? patience;

  double? lengthPenalty;

  bool? suppressBlank;

  bool? suppressTokens;

  bool? withoutTimestamps;

  double? maxInitialTimestamp;

  bool? wordTimestamps;

  String? prependPunctuations;

  String? appendPunctuations;

  double? logProbThreshold;

  double? noSpeechThreshold;

  double? compressionRatioThreshold;

  String? conditionOnPreviousText;

  String? prompt;

  String? chunkingStrategy;

  List<Object?> _toList() {
    return <Object?>[
      task,
      language,
      temperature,
      sampleLen,
      bestOf,
      beamSize,
      patience,
      lengthPenalty,
      suppressBlank,
      suppressTokens,
      withoutTimestamps,
      maxInitialTimestamp,
      wordTimestamps,
      prependPunctuations,
      appendPunctuations,
      logProbThreshold,
      noSpeechThreshold,
      compressionRatioThreshold,
      conditionOnPreviousText,
      prompt,
      chunkingStrategy,
    ];
  }

  Object encode() {
    return _toList();  }

  static DecodingOptionsMessage decode(Object result) {
    result as List<Object?>;
    return DecodingOptionsMessage(
      task: result[0] as String?,
      language: result[1] as String?,
      temperature: result[2] as double?,
      sampleLen: result[3] as int?,
      bestOf: result[4] as int?,
      beamSize: result[5] as int?,
      patience: result[6] as double?,
      lengthPenalty: result[7] as double?,
      suppressBlank: result[8] as bool?,
      suppressTokens: result[9] as bool?,
      withoutTimestamps: result[10] as bool?,
      maxInitialTimestamp: result[11] as double?,
      wordTimestamps: result[12] as bool?,
      prependPunctuations: result[13] as String?,
      appendPunctuations: result[14] as String?,
      logProbThreshold: result[15] as double?,
      noSpeechThreshold: result[16] as double?,
      compressionRatioThreshold: result[17] as double?,
      conditionOnPreviousText: result[18] as String?,
      prompt: result[19] as String?,
      chunkingStrategy: result[20] as String?,
    );
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  bool operator ==(Object other) {
    if (other is! DecodingOptionsMessage || other.runtimeType != runtimeType) {
      return false;
    }
    if (identical(this, other)) {
      return true;
    }
    return _deepEquals(encode(), other.encode());
  }

  @override
  // ignore: avoid_equals_and_hash_code_on_mutable_classes
  int get hashCode => Object.hashAll(_toList())
;
}


class _PigeonCodec extends StandardMessageCodec {
  const _PigeonCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is int) {
      buffer.putUint8(4);
      buffer.putInt64(value);
    }    else if (value is DecodingOptionsMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 129: 
        return DecodingOptionsMessage.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class WhisperKitMessage {
  /// Constructor for [WhisperKitMessage].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  WhisperKitMessage({BinaryMessenger? binaryMessenger, String messageChannelSuffix = ''})
      : pigeonVar_binaryMessenger = binaryMessenger,
        pigeonVar_messageChannelSuffix = messageChannelSuffix.isNotEmpty ? '.$messageChannelSuffix' : '';
  final BinaryMessenger? pigeonVar_binaryMessenger;

  static const MessageCodec<Object?> pigeonChannelCodec = _PigeonCodec();

  final String pigeonVar_messageChannelSuffix;

  Future<String?> getPlatformVersion() async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_whisperkit_apple.WhisperKitMessage.getPlatformVersion$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(null);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }

  Future<String?> createWhisperKit(String? model, String? modelRepo) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_whisperkit_apple.WhisperKitMessage.createWhisperKit$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[model, modelRepo]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }

  Future<String?> loadModel(String? variant, String? modelRepo, bool? redownload, int? storageLocation) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_whisperkit_apple.WhisperKitMessage.loadModel$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[variant, modelRepo, redownload, storageLocation]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }

  Future<String?> transcribeFromFile(String filePath, DecodingOptionsMessage? options) async {
    final String pigeonVar_channelName = 'dev.flutter.pigeon.flutter_whisperkit_apple.WhisperKitMessage.transcribeFromFile$pigeonVar_messageChannelSuffix';
    final BasicMessageChannel<Object?> pigeonVar_channel = BasicMessageChannel<Object?>(
      pigeonVar_channelName,
      pigeonChannelCodec,
      binaryMessenger: pigeonVar_binaryMessenger,
    );
    final Future<Object?> pigeonVar_sendFuture = pigeonVar_channel.send(<Object?>[filePath, options]);
    final List<Object?>? pigeonVar_replyList =
        await pigeonVar_sendFuture as List<Object?>?;
    if (pigeonVar_replyList == null) {
      throw _createConnectionError(pigeonVar_channelName);
    } else if (pigeonVar_replyList.length > 1) {
      throw PlatformException(
        code: pigeonVar_replyList[0]! as String,
        message: pigeonVar_replyList[1] as String?,
        details: pigeonVar_replyList[2],
      );
    } else {
      return (pigeonVar_replyList[0] as String?);
    }
  }
}
