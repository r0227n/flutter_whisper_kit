// Autogenerated from Pigeon (v22.7.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func createConnectionError(withChannelName channelName: String) -> PigeonError {
  return PigeonError(code: "channel-error", message: "Unable to establish connection on channel: '\(channelName)'.", details: "")
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonWhisperKitConfig {
  var modelPath: String? = nil
  var enableVAD: Bool? = nil
  var vadFallbackSilenceThreshold: Int64? = nil
  var vadTemperature: Double? = nil
  var enableLanguageIdentification: Bool? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PigeonWhisperKitConfig? {
    let modelPath: String? = nilOrValue(pigeonVar_list[0])
    let enableVAD: Bool? = nilOrValue(pigeonVar_list[1])
    let vadFallbackSilenceThreshold: Int64? = nilOrValue(pigeonVar_list[2])
    let vadTemperature: Double? = nilOrValue(pigeonVar_list[3])
    let enableLanguageIdentification: Bool? = nilOrValue(pigeonVar_list[4])

    return PigeonWhisperKitConfig(
      modelPath: modelPath,
      enableVAD: enableVAD,
      vadFallbackSilenceThreshold: vadFallbackSilenceThreshold,
      vadTemperature: vadTemperature,
      enableLanguageIdentification: enableLanguageIdentification
    )
  }
  func toList() -> [Any?] {
    return [
      modelPath,
      enableVAD,
      vadFallbackSilenceThreshold,
      vadTemperature,
      enableLanguageIdentification,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonTranscriptionSegment {
  var text: String
  var startTime: Double
  var endTime: Double


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PigeonTranscriptionSegment? {
    let text = pigeonVar_list[0] as! String
    let startTime = pigeonVar_list[1] as! Double
    let endTime = pigeonVar_list[2] as! Double

    return PigeonTranscriptionSegment(
      text: text,
      startTime: startTime,
      endTime: endTime
    )
  }
  func toList() -> [Any?] {
    return [
      text,
      startTime,
      endTime,
    ]
  }
}

/// Generated class from Pigeon that represents data sent in messages.
struct PigeonTranscriptionResult {
  var text: String
  var segments: [PigeonTranscriptionSegment]
  var language: String? = nil


  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> PigeonTranscriptionResult? {
    let text = pigeonVar_list[0] as! String
    let segments = pigeonVar_list[1] as! [PigeonTranscriptionSegment]
    let language: String? = nilOrValue(pigeonVar_list[2])

    return PigeonTranscriptionResult(
      text: text,
      segments: segments,
      language: language
    )
  }
  func toList() -> [Any?] {
    return [
      text,
      segments,
      language,
    ]
  }
}

private class WhisperKitApiPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      return PigeonWhisperKitConfig.fromList(self.readValue() as! [Any?])
    case 130:
      return PigeonTranscriptionSegment.fromList(self.readValue() as! [Any?])
    case 131:
      return PigeonTranscriptionResult.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class WhisperKitApiPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? PigeonWhisperKitConfig {
      super.writeByte(129)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonTranscriptionSegment {
      super.writeByte(130)
      super.writeValue(value.toList())
    } else if let value = value as? PigeonTranscriptionResult {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class WhisperKitApiPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return WhisperKitApiPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return WhisperKitApiPigeonCodecWriter(data: data)
  }
}

class WhisperKitApiPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = WhisperKitApiPigeonCodec(readerWriter: WhisperKitApiPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol WhisperKitApi {
  func getPlatformVersion(completion: @escaping (Result<String, Error>) -> Void)
  func initializeWhisperKit(config: PigeonWhisperKitConfig, completion: @escaping (Result<Bool, Error>) -> Void)
  func transcribeAudioFile(filePath: String, completion: @escaping (Result<PigeonTranscriptionResult, Error>) -> Void)
  func startStreamingTranscription(completion: @escaping (Result<Bool, Error>) -> Void)
  func stopStreamingTranscription(completion: @escaping (Result<PigeonTranscriptionResult, Error>) -> Void)
  func getAvailableModels(completion: @escaping (Result<[String], Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class WhisperKitApiSetup {
  static var codec: FlutterStandardMessageCodec { WhisperKitApiPigeonCodec.shared }
  /// Sets up an instance of `WhisperKitApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: WhisperKitApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let getPlatformVersionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisperkit_apple.WhisperKitApi.getPlatformVersion\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getPlatformVersionChannel.setMessageHandler { _, reply in
        api.getPlatformVersion { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getPlatformVersionChannel.setMessageHandler(nil)
    }
    let initializeWhisperKitChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisperkit_apple.WhisperKitApi.initializeWhisperKit\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      initializeWhisperKitChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let configArg = args[0] as! PigeonWhisperKitConfig
        api.initializeWhisperKit(config: configArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      initializeWhisperKitChannel.setMessageHandler(nil)
    }
    let transcribeAudioFileChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisperkit_apple.WhisperKitApi.transcribeAudioFile\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      transcribeAudioFileChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let filePathArg = args[0] as! String
        api.transcribeAudioFile(filePath: filePathArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      transcribeAudioFileChannel.setMessageHandler(nil)
    }
    let startStreamingTranscriptionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisperkit_apple.WhisperKitApi.startStreamingTranscription\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startStreamingTranscriptionChannel.setMessageHandler { _, reply in
        api.startStreamingTranscription { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      startStreamingTranscriptionChannel.setMessageHandler(nil)
    }
    let stopStreamingTranscriptionChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisperkit_apple.WhisperKitApi.stopStreamingTranscription\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopStreamingTranscriptionChannel.setMessageHandler { _, reply in
        api.stopStreamingTranscription { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      stopStreamingTranscriptionChannel.setMessageHandler(nil)
    }
    let getAvailableModelsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_whisperkit_apple.WhisperKitApi.getAvailableModels\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getAvailableModelsChannel.setMessageHandler { _, reply in
        api.getAvailableModels { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      getAvailableModelsChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents Flutter messages that can be called from Swift.
protocol WhisperKitEventsProtocol {
  func onTranscriptionProgress(progress progressArg: Double, completion: @escaping (Result<Void, PigeonError>) -> Void)
  func onInterimTranscriptionResult(result resultArg: PigeonTranscriptionResult, completion: @escaping (Result<Void, PigeonError>) -> Void)
}
class WhisperKitEvents: WhisperKitEventsProtocol {
  private let binaryMessenger: FlutterBinaryMessenger
  private let messageChannelSuffix: String
  init(binaryMessenger: FlutterBinaryMessenger, messageChannelSuffix: String = "") {
    self.binaryMessenger = binaryMessenger
    self.messageChannelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
  }
  var codec: WhisperKitApiPigeonCodec {
    return WhisperKitApiPigeonCodec.shared
  }
  func onTranscriptionProgress(progress progressArg: Double, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_whisperkit_apple.WhisperKitEvents.onTranscriptionProgress\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([progressArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
  func onInterimTranscriptionResult(result resultArg: PigeonTranscriptionResult, completion: @escaping (Result<Void, PigeonError>) -> Void) {
    let channelName: String = "dev.flutter.pigeon.flutter_whisperkit_apple.WhisperKitEvents.onInterimTranscriptionResult\(messageChannelSuffix)"
    let channel = FlutterBasicMessageChannel(name: channelName, binaryMessenger: binaryMessenger, codec: codec)
    channel.sendMessage([resultArg] as [Any?]) { response in
      guard let listResponse = response as? [Any?] else {
        completion(.failure(createConnectionError(withChannelName: channelName)))
        return
      }
      if listResponse.count > 1 {
        let code: String = listResponse[0] as! String
        let message: String? = nilOrValue(listResponse[1])
        let details: String? = nilOrValue(listResponse[2])
        completion(.failure(PigeonError(code: code, message: message, details: details)))
      } else {
        completion(.success(Void()))
      }
    }
  }
}
