import 'dart:io';
import 'package:test/test.dart';
import 'package:path/path.dart' as path;

/// F.I.R.S.T. Principles Test for Pigeon Kotlin Code Generation
///
/// F - Fast: < 0.1 seconds execution
/// I - Independent: No dependencies between tests  
/// R - Repeatable: Consistent results across environments
/// S - Self-validating: Clear pass/fail outcomes
/// T - Timely: Written before implementation (Red phase)
void main() {
  // Get the project root directory
  final projectRoot = Directory.current.path.contains('packages/flutter_whisper_kit')
      ? path.join(Directory.current.path, '..', '..')
      : Directory.current.path;
  group('Pigeon Kotlin Generation', () {
    test('should generate WhisperKitMessage.g.kt file after code generation', () {
      final kotlinFile = File(path.join(
        projectRoot,
        'packages/flutter_whisper_kit_android/android/src/main/kotlin/com/r0227n/flutter_whisper_kit_android/WhisperKitMessage.g.kt'
      ));
      
      expect(kotlinFile.existsSync(), isTrue,
          reason: 'WhisperKitMessage.g.kt should be generated by Pigeon');
    });

    test('should contain proper package declaration in generated Kotlin file', () {
      final kotlinFile = File(path.join(
        projectRoot,
        'packages/flutter_whisper_kit_android/android/src/main/kotlin/com/r0227n/flutter_whisper_kit_android/WhisperKitMessage.g.kt'
      ));
      
      if (kotlinFile.existsSync()) {
        final content = kotlinFile.readAsStringSync();
        expect(content.contains('package com.r0227n.flutter_whisper_kit_android'), isTrue,
            reason: 'Generated Kotlin file should have correct package declaration');
      }
    });

    test('should contain WhisperKitMessage interface definition', () {
      final kotlinFile = File(path.join(
        projectRoot,
        'packages/flutter_whisper_kit_android/android/src/main/kotlin/com/r0227n/flutter_whisper_kit_android/WhisperKitMessage.g.kt'
      ));
      
      if (kotlinFile.existsSync()) {
        final content = kotlinFile.readAsStringSync();
        expect(content.contains('interface WhisperKitMessage'), isTrue,
            reason: 'Generated file should contain WhisperKitMessage interface');
        expect(content.contains('loadModel'), isTrue,
            reason: 'Interface should contain loadModel method');
        expect(content.contains('transcribeFromFile'), isTrue,
            reason: 'Interface should contain transcribeFromFile method');
      }
    });

    test('should have proper Kotlin syntax and imports', () {
      final kotlinFile = File(path.join(
        projectRoot,
        'packages/flutter_whisper_kit_android/android/src/main/kotlin/com/r0227n/flutter_whisper_kit_android/WhisperKitMessage.g.kt'
      ));
      
      if (kotlinFile.existsSync()) {
        final content = kotlinFile.readAsStringSync();
        expect(content.contains('import'), isTrue,
            reason: 'Generated file should contain import statements');
        expect(content.contains('callback: (Result'), isTrue,
            reason: 'Async methods should use callback pattern in Kotlin');
      }
    });
  });

  group('Pigeon Configuration Validation', () {
    test('should have kotlinOut configuration in whisper_kit_api.dart', () {
      final pigeonFile = File(path.join(
        projectRoot,
        'packages/flutter_whisper_kit/pigeons/whisper_kit_api.dart'
      ));
      expect(pigeonFile.existsSync(), isTrue,
          reason: 'Pigeon configuration file should exist');
      
      final content = pigeonFile.readAsStringSync();
      expect(content.contains('kotlinOut:'), isTrue,
          reason: 'Pigeon configuration should include kotlinOut parameter');
    });

    test('should have kotlinOptions with correct package in configuration', () {
      final pigeonFile = File(path.join(
        projectRoot,
        'packages/flutter_whisper_kit/pigeons/whisper_kit_api.dart'
      ));
      
      if (pigeonFile.existsSync()) {
        final content = pigeonFile.readAsStringSync();
        expect(content.contains('kotlinOptions:'), isTrue,
            reason: 'Configuration should include kotlinOptions');
        expect(content.contains('com.r0227n.flutter_whisper_kit_android'), isTrue,
            reason: 'Package should be specified in kotlinOptions');
      }
    });
  });
}