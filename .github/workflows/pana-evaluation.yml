name: Pana Package Evaluation

on:
  pull_request:
    branches: [ 'release/**' ]
  workflow_dispatch:

jobs:
  pana-evaluation:
    name: Evaluate Package with Pana
    runs-on: ubuntu-latest
    env:
      OUTPUT_DIR: /tmp/pana-evaluation
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'
      
      - name: Install Dependencies
        run: flutter pub get
      
      - name: Activate Pana
        run: dart pub global activate pana
      
      - name: Create Output Directory
        run: mkdir -p ${{ env.OUTPUT_DIR }}
      
      - name: Run Pana Evaluation
        id: pana
        run: |
          # Run pana on the package directory
          cd packages/flutter_whisper_kit
          PANA_OUTPUT=$(dart pub global run pana --json --no-warning)
          
          # Extract key metrics from the output
          SCORE=$(echo "$PANA_OUTPUT" | jq -r '.scores.grantedPoints')
          MAX_SCORE=$(echo "$PANA_OUTPUT" | jq -r '.scores.maxPoints')
          PERCENTAGE=$(echo "$PANA_OUTPUT" | jq -r '.scores.grantedPoints / .scores.maxPoints * 100 | floor')
          
          # Count issues by type
          ERRORS=$(echo "$PANA_OUTPUT" | jq -r '.report.sections[].status | select(. == "failed") | length')
          WARNINGS=$(echo "$PANA_OUTPUT" | jq -r '.report.sections[].status | select(. == "partial") | length')
          SUGGESTIONS=$(echo "$PANA_OUTPUT" | jq -r '.report.sections[].hints | length')
          
          # Save metrics to GITHUB_OUTPUT for the next step
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "max_score=$MAX_SCORE" >> $GITHUB_OUTPUT
          echo "percentage=$PERCENTAGE" >> $GITHUB_OUTPUT
          echo "errors=$ERRORS" >> $GITHUB_OUTPUT
          echo "warnings=$WARNINGS" >> $GITHUB_OUTPUT
          echo "suggestions=$SUGGESTIONS" >> $GITHUB_OUTPUT
          
          # Save pana output to a file
          echo "$PANA_OUTPUT" > ${{ env.OUTPUT_DIR }}/pana_output.json
      
      - name: Generate Comment Content
        id: comment
        if: github.event_name == 'pull_request'
        run: |
          # Read pana output
          PANA_OUTPUT=$(cat ${{ env.OUTPUT_DIR }}/pana_output.json)
          
          # Start building the comment
          echo "## 📊 Pana Package Evaluation Results" > ${{ env.OUTPUT_DIR }}/comment.md
          echo "" >> ${{ env.OUTPUT_DIR }}/comment.md
          echo "### Overall Score: ${{ steps.pana.outputs.score }}/${{ steps.pana.outputs.max_score }} (${{ steps.pana.outputs.percentage }}%)" >> ${{ env.OUTPUT_DIR }}/comment.md
          echo "" >> ${{ env.OUTPUT_DIR }}/comment.md
          
          # Add summary of issues
          echo "### Summary" >> ${{ env.OUTPUT_DIR }}/comment.md
          echo "- 🔴 Errors: ${{ steps.pana.outputs.errors || 0 }}" >> ${{ env.OUTPUT_DIR }}/comment.md
          echo "- 🟠 Warnings: ${{ steps.pana.outputs.warnings || 0 }}" >> ${{ env.OUTPUT_DIR }}/comment.md
          echo "- 💡 Suggestions: ${{ steps.pana.outputs.suggestions || 0 }}" >> ${{ env.OUTPUT_DIR }}/comment.md
          echo "" >> ${{ env.OUTPUT_DIR }}/comment.md
          
          # Add detailed report sections
          echo "### Detailed Report" >> ${{ env.OUTPUT_DIR }}/comment.md
          echo "" >> ${{ env.OUTPUT_DIR }}/comment.md
          
          # Process each section using jq
          jq -r '.report.sections[] | "#### " + 
            (if .status == "passed" then "✅ " 
            elif .status == "failed" then "❌ " 
            elif .status == "partial" then "⚠️ " 
            else "❓ " end) + 
            .title + 
            if (.hints | length > 0) then "\n<details><summary>Show details</summary>\n\n" + 
              (.hints | map("- " + .) | join("\n")) + 
              "\n\n</details>\n\n" 
            else "\n\n" end' ${{ env.OUTPUT_DIR }}/pana_output.json >> ${{ env.OUTPUT_DIR }}/comment.md
          
          echo "" >> ${{ env.OUTPUT_DIR }}/comment.md
          echo "---" >> ${{ env.OUTPUT_DIR }}/comment.md
          echo "*This comment was automatically generated by the Pana Package Evaluation workflow.*" >> ${{ env.OUTPUT_DIR }}/comment.md
      
      - name: Post PR Comment
        if: github.event_name == 'pull_request'
        run: |
          # Post the comment to the PR using gh CLI
          gh pr comment ${{ github.event.pull_request.number }} --body-file ${{ env.OUTPUT_DIR }}/comment.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
