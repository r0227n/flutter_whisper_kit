name: Pana Package Evaluation

on:
  pull_request:
    branches: [ 'release/**' ]
  workflow_dispatch:

jobs:
  pana-evaluation:
    name: Evaluate Package with Pana
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.x'
          channel: 'stable'
      
      - name: Install Dependencies
        run: flutter pub get
      
      - name: Activate Pana
        run: dart pub global activate pana
      
      - name: Run Pana Evaluation
        id: pana
        run: |
          # Run pana on the package directory
          cd packages/flutter_whisper_kit
          PANA_OUTPUT=$(dart pub global run pana --json --no-warning)
          
          # Extract key metrics from the output
          SCORE=$(echo "$PANA_OUTPUT" | jq -r '.scores.grantedPoints')
          MAX_SCORE=$(echo "$PANA_OUTPUT" | jq -r '.scores.maxPoints')
          PERCENTAGE=$(echo "$PANA_OUTPUT" | jq -r '.scores.grantedPoints / .scores.maxPoints * 100 | floor')
          
          # Count issues by type
          ERRORS=$(echo "$PANA_OUTPUT" | jq -r '.report.sections[].status | select(. == "failed") | length')
          WARNINGS=$(echo "$PANA_OUTPUT" | jq -r '.report.sections[].status | select(. == "partial") | length')
          SUGGESTIONS=$(echo "$PANA_OUTPUT" | jq -r '.report.sections[].hints | length')
          
          # Save metrics to environment variables for the next step
          echo "SCORE=$SCORE" >> $GITHUB_ENV
          echo "MAX_SCORE=$MAX_SCORE" >> $GITHUB_ENV
          echo "PERCENTAGE=$PERCENTAGE" >> $GITHUB_ENV
          echo "ERRORS=$ERRORS" >> $GITHUB_ENV
          echo "WARNINGS=$WARNINGS" >> $GITHUB_ENV
          echo "SUGGESTIONS=$SUGGESTIONS" >> $GITHUB_ENV
          
          # Save full report for PR comment
          echo "$PANA_OUTPUT" > /tmp/pana_output.json
      
      - name: Create PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const panaOutput = JSON.parse(fs.readFileSync('/tmp/pana_output.json', 'utf8'));
            
            // Format the comment
            let comment = `## 📊 Pana Package Evaluation Results\n\n`;
            comment += `### Overall Score: ${process.env.SCORE}/${process.env.MAX_SCORE} (${process.env.PERCENTAGE}%)\n\n`;
            
            // Add summary of issues
            comment += `### Summary\n`;
            comment += `- 🔴 Errors: ${process.env.ERRORS || 0}\n`;
            comment += `- 🟠 Warnings: ${process.env.WARNINGS || 0}\n`;
            comment += `- 💡 Suggestions: ${process.env.SUGGESTIONS || 0}\n\n`;
            
            // Add detailed report sections
            comment += `### Detailed Report\n\n`;
            
            // Process each section
            panaOutput.report.sections.forEach(section => {
              const status = section.status === 'passed' ? '✅' : 
                            section.status === 'failed' ? '❌' : 
                            section.status === 'partial' ? '⚠️' : '❓';
              
              comment += `#### ${status} ${section.title}\n`;
              
              // Add hints if any
              if (section.hints && section.hints.length > 0) {
                comment += `<details><summary>Show details</summary>\n\n`;
                section.hints.forEach(hint => {
                  comment += `- ${hint}\n`;
                });
                comment += `\n</details>\n\n`;
              }
            });
            
            comment += `\n---\n`;
            comment += `*This comment was automatically generated by the Pana Package Evaluation workflow.*`;
            
            // Post the comment to the PR
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
