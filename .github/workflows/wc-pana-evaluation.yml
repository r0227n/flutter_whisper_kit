name: Pana Package Evaluation

on:
  workflow_call:
    inputs:
      package_dir:
        description: 'Directory of the package to evaluate'
        required: false
        type: string
        default: 'packages/flutter_whisper_kit'
  pull_request:
    branches: [ 'release/**' ]
  workflow_dispatch:

jobs:
  detect-changed-packages:
    name: Detect Changed Packages
    runs-on: ubuntu-latest
    outputs:
      pkg_flutter_whisper_kit: ${{ steps.changed-files.outputs.pkg_flutter_whisper_kit_any_changed == 'true' }}
      pkg_flutter_whisper_kit_apple: ${{ steps.changed-files.outputs.pkg_flutter_whisper_kit_apple_any_changed == 'true' }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46
        with:
          files_yaml: |
            pkg_flutter_whisper_kit:
              - 'packages/flutter_whisper_kit/**'
            pkg_flutter_whisper_kit_apple:
              - 'packages/flutter_whisper_kit_apple/**'

  pana-evaluation-flutter-whisper-kit:
    name: Evaluate Flutter Whisper Kit Package
    needs: detect-changed-packages
    if: ${{ needs.detect-changed-packages.outputs.pkg_flutter_whisper_kit == 'true' || inputs.package_dir == 'packages/flutter_whisper_kit' }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    env:
      BASE_DIR: /tmp/pana-evaluation-flutter-whisper-kit
      PANA_OUTPUT_FILE: /tmp/pana-evaluation-flutter-whisper-kit/pana_output.json
      COMMENT_FILE: /tmp/pana-evaluation-flutter-whisper-kit/comment.md
      PACKAGE_DIR: packages/flutter_whisper_kit
      PACKAGE_NAME: Flutter Whisper Kit
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup FVM
        uses: ./.github/actions/setup-fvm
      
      - name: Install Dependencies
        run: flutter pub get
      
      - name: Activate Pana
        run: dart pub global activate pana
      
      - name: Create Output Directory
        run: mkdir -p ${{ env.BASE_DIR }}
      
      - name: Run Pana Evaluation
        id: pana
        run: |
          # Run pana on the package directory
          cd ${{ env.PACKAGE_DIR }}
          dart pub global run pana --json --no-warning > ${{ env.PANA_OUTPUT_FILE }}
          
          # Extract key metrics from the output
          SCORE=$(cat ${{ env.PANA_OUTPUT_FILE }} | jq -r '.scores.grantedPoints')
          MAX_SCORE=$(cat ${{ env.PANA_OUTPUT_FILE }} | jq -r '.scores.maxPoints')
          PERCENTAGE=$(cat ${{ env.PANA_OUTPUT_FILE }} | jq -r '.scores.grantedPoints / .scores.maxPoints * 100 | floor')
          
          # Count issues by type
          ERRORS=$(cat ${{ env.PANA_OUTPUT_FILE }} | jq -r '[.report.sections[] | select(.status == "failed")] | length')
          WARNINGS=$(cat ${{ env.PANA_OUTPUT_FILE }} | jq -r '[.report.sections[] | select(.status == "partial")] | length')
          SUGGESTIONS=$(cat ${{ env.PANA_OUTPUT_FILE }} | jq -r '[.report.sections[] | .hints | length] | add // 0')
          
          # Save metrics to GITHUB_OUTPUT for the next step
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "max_score=$MAX_SCORE" >> $GITHUB_OUTPUT
          echo "percentage=$PERCENTAGE" >> $GITHUB_OUTPUT
          echo "errors=$ERRORS" >> $GITHUB_OUTPUT
          echo "warnings=$WARNINGS" >> $GITHUB_OUTPUT
          echo "suggestions=$SUGGESTIONS" >> $GITHUB_OUTPUT
      
      - name: Generate Comment Content
        id: comment
        if: github.event_name == 'pull_request'
        run: |
          # Read pana output
          PANA_OUTPUT=$(cat ${{ env.PANA_OUTPUT_FILE }})
          
          # Start building the comment
          echo "## 📊 Pana Package Evaluation Results: ${{ env.PACKAGE_NAME }}" > ${{ env.COMMENT_FILE }}
          echo "" >> ${{ env.COMMENT_FILE }}
          echo "### Overall Score: ${{ steps.pana.outputs.score }}/${{ steps.pana.outputs.max_score }} (${{ steps.pana.outputs.percentage }}%)" >> ${{ env.COMMENT_FILE }}
          echo "" >> ${{ env.COMMENT_FILE }}
          
          # Add summary of issues
          echo "### Summary" >> ${{ env.COMMENT_FILE }}
          echo "- 🔴 Errors: ${{ steps.pana.outputs.errors || 0 }}" >> ${{ env.COMMENT_FILE }}
          echo "- 🟠 Warnings: ${{ steps.pana.outputs.warnings || 0 }}" >> ${{ env.COMMENT_FILE }}
          echo "- 💡 Suggestions: ${{ steps.pana.outputs.suggestions || 0 }}" >> ${{ env.COMMENT_FILE }}
          echo "" >> ${{ env.COMMENT_FILE }}
          
          # Add detailed report sections
          echo "### Detailed Report" >> ${{ env.COMMENT_FILE }}
          echo "" >> ${{ env.COMMENT_FILE }}
          
          # Process each section using jq
          jq -r '.report.sections[] | "#### " + 
            (if .status == "passed" then "✅ " 
            elif .status == "failed" then "❌ " 
            elif .status == "partial" then "⚠️ " 
            else "❓ " end) + 
            .title + 
            if (.hints | length > 0) then "\n<details><summary>Show details</summary>\n\n" + 
              (.hints | map("- " + .) | join("\n")) + 
              "\n\n</details>\n\n" 
            else "\n\n" end' ${{ env.PANA_OUTPUT_FILE }} >> ${{ env.COMMENT_FILE }}
          
          echo "" >> ${{ env.COMMENT_FILE }}
          echo "---" >> ${{ env.COMMENT_FILE }}
          echo "*This comment was automatically generated by the Pana Package Evaluation workflow.*" >> ${{ env.COMMENT_FILE }}
      
      - name: Post PR Comment
        if: github.event_name == 'pull_request'
        run: |
          # Post the comment to the PR using gh CLI
          gh pr comment ${{ github.event.pull_request.number }} --body-file ${{ env.COMMENT_FILE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  pana-evaluation-flutter-whisper-kit-apple:
    name: Evaluate Flutter Whisper Kit Apple Package
    needs: detect-changed-packages
    if: ${{ needs.detect-changed-packages.outputs.pkg_flutter_whisper_kit_apple == 'true' || inputs.package_dir == 'packages/flutter_whisper_kit_apple' }}
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    env:
      BASE_DIR: /tmp/pana-evaluation-flutter-whisper-kit-apple
      PANA_OUTPUT_FILE: /tmp/pana-evaluation-flutter-whisper-kit-apple/pana_output.json
      COMMENT_FILE: /tmp/pana-evaluation-flutter-whisper-kit-apple/comment.md
      PACKAGE_DIR: packages/flutter_whisper_kit_apple
      PACKAGE_NAME: Flutter Whisper Kit Apple
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup FVM
        uses: ./.github/actions/setup-fvm
      
      - name: Install Dependencies
        run: flutter pub get
      
      - name: Activate Pana
        run: dart pub global activate pana
      
      - name: Create Output Directory
        run: mkdir -p ${{ env.BASE_DIR }}
      
      - name: Run Pana Evaluation
        id: pana
        run: |
          # Run pana on the package directory
          cd ${{ env.PACKAGE_DIR }}
          dart pub global run pana --json --no-warning > ${{ env.PANA_OUTPUT_FILE }}
          
          # Extract key metrics from the output
          SCORE=$(cat ${{ env.PANA_OUTPUT_FILE }} | jq -r '.scores.grantedPoints')
          MAX_SCORE=$(cat ${{ env.PANA_OUTPUT_FILE }} | jq -r '.scores.maxPoints')
          PERCENTAGE=$(cat ${{ env.PANA_OUTPUT_FILE }} | jq -r '.scores.grantedPoints / .scores.maxPoints * 100 | floor')
          
          # Count issues by type
          ERRORS=$(cat ${{ env.PANA_OUTPUT_FILE }} | jq -r '[.report.sections[] | select(.status == "failed")] | length')
          WARNINGS=$(cat ${{ env.PANA_OUTPUT_FILE }} | jq -r '[.report.sections[] | select(.status == "partial")] | length')
          SUGGESTIONS=$(cat ${{ env.PANA_OUTPUT_FILE }} | jq -r '[.report.sections[] | .hints | length] | add // 0')
          
          # Save metrics to GITHUB_OUTPUT for the next step
          echo "score=$SCORE" >> $GITHUB_OUTPUT
          echo "max_score=$MAX_SCORE" >> $GITHUB_OUTPUT
          echo "percentage=$PERCENTAGE" >> $GITHUB_OUTPUT
          echo "errors=$ERRORS" >> $GITHUB_OUTPUT
          echo "warnings=$WARNINGS" >> $GITHUB_OUTPUT
          echo "suggestions=$SUGGESTIONS" >> $GITHUB_OUTPUT
      
      - name: Generate Comment Content
        id: comment
        if: github.event_name == 'pull_request'
        run: |
          # Read pana output
          PANA_OUTPUT=$(cat ${{ env.PANA_OUTPUT_FILE }})
          
          # Start building the comment
          echo "## 📊 Pana Package Evaluation Results: ${{ env.PACKAGE_NAME }}" > ${{ env.COMMENT_FILE }}
          echo "" >> ${{ env.COMMENT_FILE }}
          echo "### Overall Score: ${{ steps.pana.outputs.score }}/${{ steps.pana.outputs.max_score }} (${{ steps.pana.outputs.percentage }}%)" >> ${{ env.COMMENT_FILE }}
          echo "" >> ${{ env.COMMENT_FILE }}
          
          # Add summary of issues
          echo "### Summary" >> ${{ env.COMMENT_FILE }}
          echo "- 🔴 Errors: ${{ steps.pana.outputs.errors || 0 }}" >> ${{ env.COMMENT_FILE }}
          echo "- 🟠 Warnings: ${{ steps.pana.outputs.warnings || 0 }}" >> ${{ env.COMMENT_FILE }}
          echo "- 💡 Suggestions: ${{ steps.pana.outputs.suggestions || 0 }}" >> ${{ env.COMMENT_FILE }}
          echo "" >> ${{ env.COMMENT_FILE }}
          
          # Add detailed report sections
          echo "### Detailed Report" >> ${{ env.COMMENT_FILE }}
          echo "" >> ${{ env.COMMENT_FILE }}
          
          # Process each section using jq
          jq -r '.report.sections[] | "#### " + 
            (if .status == "passed" then "✅ " 
            elif .status == "failed" then "❌ " 
            elif .status == "partial" then "⚠️ " 
            else "❓ " end) + 
            .title + 
            if (.hints | length > 0) then "\n<details><summary>Show details</summary>\n\n" + 
              (.hints | map("- " + .) | join("\n")) + 
              "\n\n</details>\n\n" 
            else "\n\n" end' ${{ env.PANA_OUTPUT_FILE }} >> ${{ env.COMMENT_FILE }}
          
          echo "" >> ${{ env.COMMENT_FILE }}
          echo "---" >> ${{ env.COMMENT_FILE }}
          echo "*This comment was automatically generated by the Pana Package Evaluation workflow.*" >> ${{ env.COMMENT_FILE }}
      
      - name: Post PR Comment
        if: github.event_name == 'pull_request'
        run: |
          # Post the comment to the PR using gh CLI
          gh pr comment ${{ github.event.pull_request.number }} --body-file ${{ env.COMMENT_FILE }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
